#!/usr/bin/php
<?php

/**
 * Antimalware Scanner
 * @author Marco Cesarato <cesarato.developer@gmail.com>
 * @copyright Copyright (c) 2019
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @link https://github.com/marcocesarato/PHP-Antimalware-Scanner
 * @version 0.4.0.44
 */

class Argument { public $name, $vararg = false, $required = false, $defaultValue, $help; public function __construct($name, $options = array()) { $this->name = $name; $this->vararg = (bool) @$options['var_arg']; $this->required = (bool) @$options['required']; $this->defaultValue = @$options['default']; $this->help = @$options['help']; } public function __toString() { $arg = "<{$this->name}>"; if ($this->vararg) { $arg = "{$arg} ..."; } if (!$this->required) { return "[{$arg}]"; } return $arg; } }; class Argv implements \ArrayAccess { protected $name, $description, $examples = array(), $flags = array(), $args = array(), $parsedFlags = array(), $parsedNamedArgs = array(), $parsedArgs = array(); static function build($callback) { $parser = new static(); if ($callback instanceof \Closure and is_callable(array($callback, 'bindTo'))) { $callback = $callback->bindTo($parser); } call_user_func($callback, $parser); return $parser; } public function __construct($description = '', $name = null, $examples = array()) { $this->description = $description; $this->name = $name; $this->examples = $examples; } public function parse() { $args = array_slice($_SERVER['argv'], 1); foreach ($args as $pos => $arg) { $value = null; if (substr($arg, 0, 1) === '-') { if (preg_match('/^(.+)=(?:\\"|\\\')?(.+)(?:\\"|\\\')?/', $arg, $matches)) { $arg = $matches[1]; $value = $matches[2]; } if (!($flag = @$this->flags[$arg])) { return; } unset($args[$pos]); if ($flag->hasValue) { if (!isset($value)) { $value = $args[$pos + 1]; unset($args[$pos + 1]); } } else { $value = true; } if (null !== $flag->callback) { call_user_func_array($flag->callback, array(&$value)); } $flag->var = $this->parsedFlags[$flag->name] = $value; } } foreach ($this->flags as $flag) { if (!array_key_exists($flag->name, $this->parsedFlags)) { $flag->var = $this->parsedFlags[$flag->name] = $flag->defaultValue; } } $this->parsedArgs = $args = array_values($args); $pos = 0; foreach ($this->args as $arg) { if ($arg->required and !isset($args[$pos])) { return; } if (isset($args[$pos])) { if ($arg->vararg) { $value = array_slice($args, $pos); $pos += count($value); } else { $value = $args[$pos]; $pos++; } } else { $value = $arg->defaultValue; } $this->parsedNamedArgs[$arg->name] = $value; } } public function addFlag($name, $options = array(), $callback = null) { $flag = new Flag($name, $options, $callback); foreach ($flag->aliases as $alias) { $this->flags[$alias] = $flag; } return $this; } public function addFlagVar($name, &$var, $options = array()) { $options['var'] =& $var; return $this->addFlag($name, $options); } public function addArgument($name, $options = array()) { $arg = new Argument($name, $options); $this->args[] = $arg; return $this; } public function args() { return $this->parsedArgs; } public function count() { return count($this->args()); } public function get($name) { return $this->flag($name) ?: $this->arg($name); } public function arg($pos) { if (array_key_exists($pos, $this->parsedNamedArgs)) { return $this->parsedNamedArgs[$pos]; } if (array_key_exists($pos, $this->parsedArgs)) { return $this->parsedArgs[$pos]; } } public function flag($name) { if (array_key_exists($name, $this->parsedFlags)) { return $this->parsedFlags[$name]; } } public function usage() { $flags = join(' ', array_unique(array_values($this->flags))); $args = join(' ', $this->args); $script = $this->name ?: 'php ' . basename($_SERVER['SCRIPT_NAME']); $usage = "Usage: {$script} {$flags} {$args}"; if ($this->examples) { $usage .= '

Examples

' . join('
', $this->examples); } if ($this->description) { $usage .= "\n\n{$this->description}"; } return $usage; } public function slice($start, $length = null) { return array_slice($this->parsedArgs, $start, $length); } public function offsetGet($offset) { return $this->get($offset); } public function offsetExists($offset) { return null !== $this->get($offset); } public function offsetSet($offset, $value) { } public function offsetUnset($offset) { } }; class Console { public static $foreground_colors = array('black' => '0;30', 'dark_gray' => '1;30', 'blue' => '0;34', 'light_blue' => '1;34', 'green' => '0;32', 'light_green' => '1;32', 'cyan' => '0;36', 'light_cyan' => '1;36', 'red' => '0;31', 'light_red' => '1;31', 'purple' => '0;35', 'light_purple' => '1;35', 'brown' => '0;33', 'yellow' => '1;33', 'light_gray' => '0;37', 'white' => '1;37'); public static $background_colors = array('black' => '40', 'red' => '41', 'green' => '42', 'yellow' => '43', 'blue' => '44', 'magenta' => '45', 'cyan' => '46', 'light_gray' => '47'); public static function eol($n) { $eol = ''; for ($i = 0; $i < $n; $i++) { $eol .= PHP_EOL; } return $eol; } public static function header() { $version = Application::$VERSION; $header = '

 █████╗ ███╗   ███╗██╗    ██╗███████╗ ██████╗ █████╗ ███╗   ██╗
██╔══██╗████╗ ████║██║    ██║██╔════╝██╔════╝██╔══██╗████╗  ██║
███████║██╔████╔██║██║ █╗ ██║███████╗██║     ███████║██╔██╗ ██║
██╔══██║██║╚██╔╝██║██║███╗██║╚════██║██║     ██╔══██║██║╚██╗██║
██║  ██║██║ ╚═╝ ██║╚███╔███╔╝███████║╚██████╗██║  ██║██║ ╚████║
╚═╝  ╚═╝╚═╝     ╚═╝ ╚══╝╚══╝ ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝
Github: https://github.com/marcocesarato/PHP-Antimalware-Scanner'; Console::display($header, 'green'); Console::display(self::eol(2)); Console::display(self::title('version ' . $version), 'green'); Console::display(self::eol(2)); Console::display(self::title(''), 'black', 'green'); Console::display(self::eol(1)); Console::display(self::title('PHP Antimalware Scanner'), 'black', 'green'); Console::display(self::eol(1)); Console::display(self::title('Created by Marco Cesarato'), 'black', 'green'); Console::display(self::eol(1)); Console::display(self::title(''), 'black', 'green'); Console::display(self::eol(2)); } public static function title($text, $char = ' ', $length = 64) { $result = ''; $str_length = strlen($text); $spaces = $length - $str_length; $spaces_len_half = $spaces / 2; $spaces_len_left = round($spaces_len_half); $spaces_len_right = round($spaces_len_half); if (round($spaces_len_half) - $spaces_len_half >= 0.5) { $spaces_len_left--; } for ($i = 0; $i < $spaces_len_left; $i++) { $result .= $char; } $result .= $text; for ($i = 0; $i < $spaces_len_right; $i++) { $result .= $char; } return $result; } public static function progress($done, $total, $size = 30) { static $start_time; if ($done > $total) { return; } if (empty($start_time)) { $start_time = time(); } $now = time(); $perc = (double) ($done / $total); $bar = floor($perc * $size); $status_bar = '
['; $status_bar .= str_repeat('=', $bar); if ($bar < $size) { $status_bar .= '>'; $status_bar .= str_repeat(' ', $size - $bar); } else { $status_bar .= '='; } $disp = number_format($perc * 100, 0); $status_bar .= "] {$disp}%"; $rate = ($now - $start_time) / $done; $left = $total - $done; $eta = round($rate * $left, 2); $eta_type = 'sec.'; $elapsed = $now - $start_time; $elapsed_type = 'sec.'; if ($eta > 59) { $eta_type = 'min.'; $eta = round($eta / 60); } if ($elapsed > 59) { $elapsed_type = 'min.'; $elapsed = round($elapsed / 60); } self::display("{$status_bar} ", 'black', 'green'); self::display(' '); self::display("{$done}/{$total}", 'green'); self::display(' remaining: ' . number_format($eta) . ' ' . $eta_type . '  elapsed: ' . number_format($elapsed) . ' ' . $elapsed_type); ob_flush(); flush(); if ($done == $total) { self::display(self::eol(1)); } } public static function display($string, $foreground_color = 'white', $background_color = null, $escape = true) { self::write($string, $foreground_color, $background_color, false, $escape); } public static function write($string, $foreground_color = 'white', $background_color = null, $log = null, $escape = true) { $return_string = $string; if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { $foreground_color = null; $background_color = null; } if (isset($_REQUEST['log']) && $log === null) { $log = true; } if ($escape) { $return_string = self::escape($return_string); } $colored_string = ''; if (isset(self::$foreground_colors[$foreground_color])) { $colored_string .= '[' . self::$foreground_colors[$foreground_color] . 'm'; } if (isset(self::$background_colors[$background_color])) { $colored_string .= '[' . self::$background_colors[$background_color] . 'm'; } $colored_string .= $return_string . '[0m'; if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { echo $return_string; } else { echo $colored_string; } if ($log) { self::log($string); } } public static function read($string, $foreground_color = 'white', $background_color = null) { if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { $foreground_color = null; $background_color = null; } $colored_string = ''; if (isset(self::$foreground_colors[$foreground_color])) { $colored_string .= '[' . self::$foreground_colors[$foreground_color] . 'm'; } if (isset(self::$background_colors[$background_color])) { $colored_string .= '[' . self::$background_colors[$background_color] . 'm'; } $colored_string .= $string . '[0m'; $read = null; if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { echo Application::$NAME . ' > ' . trim($string) . ' '; $read = trim(stream_get_line(STDIN, 1024, self::eol(1))); } else { $read = readline(Application::$NAME . ' > ' . trim($colored_string) . ' '); } return $read; } public static function code($string, $errors = array(), $log = null) { if (isset($_REQUEST['log']) && $log === null) { $log = true; } $code = $string; if (count($errors) > 0) { foreach ($errors as $pattern) { preg_match($pattern, $code, $string_match); $escaped = self::escape($string_match[0]); $code = str_replace($string_match[0], '[' . self::$foreground_colors['red'] . 'm' . $escaped . '[' . self::$foreground_colors['white'] . 'm', $code); } } $lines = explode('
', $code); for ($i = 0; $i < count($lines); $i++) { if ($i != 0) { self::display(self::eol(1)); } self::display('  ' . str_pad((string) ($i + 1), strlen((string) count($lines)), ' ', STR_PAD_LEFT) . ' | ', 'yellow'); self::display($lines[$i], 'white', null, false); } if ($log) { self::log($string); } } public static function log($string) { file_put_contents(Application::$PATH_LOGS, $string, FILE_APPEND); } public static function escape($string) { return mb_convert_encoding(preg_replace('/(e|\\x1B|[[:cntrl:]]|\\033)\\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGKc]/', '', $string), 'utf-8', 'auto'); } public static function helper() { $exploit_list = implode(self::eol(1) . '- ', array_keys(Definitions::$EXPLOITS)); $functions_list = implode(self::eol(1) . '- ', Definitions::$FUNCTIONS); Console::display(self::title(''), 'black', 'cyan'); Console::display(self::eol(1)); Console::display(self::title('HELP'), 'black', 'cyan'); Console::display(self::eol(1)); Console::display(self::title(''), 'black', 'cyan'); Console::display(self::eol(1)); $help = "\r\nExploits: \r\n- {$exploit_list}\r\n    \r\nFunctions: \r\n- {$functions_list}\r\n\r\nArguments:\r\n<path>                       Define the path to scan (default: current directory)\r\n\r\nFlags:\r\n-a   --agile                 Help to have less false positive on WordPress and others platforms\r\n                             enabling exploits mode and removing some common exploit pattern\r\n                             but this method could not find some malware\r\n-e   --only-exploits         Check only exploits and not the functions\r\n                             -- Recommended for WordPress or others platforms\r\n-f   --only-functions        Check only functions and not the exploits\r\n-h   --help                  Show the available flags and arguments\r\n-l   --log                   Write a log file 'scanner.log' with all the operations done\r\n-s   --scan                  Scan only mode without check and remove malware. It also write\r\n                             all malware paths found to 'scanner_infected.log' file\r\n                             \r\n     --exploits=\"...\"        Filter exploits\r\n     --functions=\"...\"       Define functions to search\r\n     --whitelist-only-path   Check on whitelist only file path and not line number\r\n     \r\nNotes: For open files with nano or vim run the scripts with \"-d disable_functions=''\"\r\n       examples: php -d disable_functions='' scanner ./mywebsite/http/ --log --agile --only-exploits\r\n                 php -d disable_functions='' scanner --agile --only-exploits\r\n                 php -d disable_functions='' scanner --exploits=\"double_var2\" --functions=\"eval, str_replace\""; self::display($help . self::eol(2) . Application::$ARGV->usage() . self::eol(2)); die; } }; class CSV { public static function read($filename) { if (!file_exists($filename)) { return array(); } $file_handle = fopen($filename, 'r'); $array = array(); while (!feof($file_handle)) { $array[] = fgetcsv($file_handle, 1024); } fclose($file_handle); return $array; } public static function generate($data, $delimiter = ',', $enclosure = '"') { $handle = fopen('php://temp', 'r+'); foreach ($data as $line) { fputcsv($handle, $line, $delimiter, $enclosure); } $contents = ''; rewind($handle); while (!feof($handle)) { $contents .= fread($handle, 8192); } fclose($handle); return $contents; } public static function write($filename, $data, $delimiter = ',', $enclosure = '"') { $csv = self::generate($data, $delimiter, $enclosure); return file_put_contents($filename, $csv); } }; class Definitions { public static $EXPLOITS = array('eval_chr' => '/chr[\\s\\r\\n]*\\([\\s\\r\\n]*101[\\s\\r\\n]*\\)[\\s\\r\\n]*\\.[\\s\\r\\n]*chr[\\s\\r\\n]*\\([\\s\\r\\n]*118[\\s\\r\\n]*\\)[\\s\\r\\n]*\\.[\\s\\r\\n]*chr[\\s\\r\\n]*\\([\\s\\r\\n]*97[\\s\\r\\n]*\\)[\\s\\r\\n]*\\.[\\s\\r\\n]*chr[\\s\\r\\n]*\\([\\s\\r\\n]*108[\\s\\r\\n]*\\)/i', 'eval_preg' => '/(preg_replace(_callback)?|mb_ereg_replace|preg_filter)\\s*\\(.+(\\/|\\\\x2f)(e|\\\\x65)[\\\'\\"].*?(?=\\))\\)/i', 'eval_base64' => '/eval[\\s\\r\\n]*\\([\\s\\r\\n]*base64_decode[\\s\\r\\n]*\\((?<=\\().*?(?=\\))\\)/i', 'eval_comment' => '/(eval|preg_replace|system|assert|passthru|(pcntl_)?exec|shell_exec|call_user_func(_array)?)\\/\\*[^\\*]*\\*\\/\\((?<=\\().*?(?=\\))\\)/', 'align' => '/(\\$\\w+=[^;]*)*;\\$\\w+=@?\\$\\w+\\((?<=\\().*?(?=\\))\\)/si', 'b374k' => '/(\\\'|\\")ev(\\\'|\\")\\.(\\\'|\\")al(\\\'|\\")\\.(\\\'|\\")\\(\\"\\?>/i', 'weevely3' => '/\\$\\w=\\$[a-zA-Z]\\(\'\',\\$\\w\\);\\$\\w\\(\\);/i', 'c99_launcher' => '/;\\$\\w+\\(\\$\\w+(,\\s?\\$\\w+)+\\);/i', 'too_many_chr' => '/(chr\\([\\d]+\\)\\.){8}/i', 'concat' => '/(\\$[\\w\\[\\]\\\'\\"]+\\.[\\n\\r]*){10}/i', 'concat_vars_with_spaces' => '/(\\$([a-zA-Z0-9]+)[\\s\\r\\n]*\\.[\\s\\r\\n]*){6}/', 'concat_vars_array' => '/(\\$([a-zA-Z0-9]+)(\\{|\\[)([0-9]+)(\\}|\\])[\\s\\r\\n]*\\.[\\s\\r\\n]*){6}.*?(?=\\})\\}/i', 'var_as_func' => '/\\$_(GET|POST|COOKIE|REQUEST|SERVER)[\\s\\r\\n]*\\[[^\\]]+\\][\\s\\r\\n]*\\((?<=\\().*?(?=\\))\\)/i', 'global_var_string' => '/\\$\\{[\\s\\r\\n]*(\\\'|\\")_(GET|POST|COOKIE|REQUEST|SERVER)(\\\'|\\")[\\s\\r\\n]*\\}/i', 'extract_global' => '/extract\\([\\s\\r\\n]*\\$_(GET|POST|COOKIE|REQUEST|SERVER).*?(?=\\))\\)/i', 'escaped_path' => '/(\\x[0-9abcdef]{2}[a-z0-9.-\\/]{1,4}){4,}/i', 'include_icon' => '/include\\(?[\\s\\r\\n]*(\\"|\\\')(.*?)(\\.|\\056\\046\\2E)(\\i|\\\\151|\\x69|\\105)(c|\\143\\099\\x63)(o|\\157\\111|\\x6f)(\\"|\\\')\\)?/mi', 'backdoor_code' => '/eva1fYlbakBcVSir/i', 'infected_comment' => '/\\/\\*[a-z0-9]{5}\\*\\//i', 'hex_char' => '/\\[Xx](5[Ff])/i', 'hacked_by' => '/hacked[\\s\\r\\n]*by/i', 'killall' => '/killall[\\s\\r\\n]*\\-9/i', 'download_remote_code' => '/echo\\s+file_get_contents[\\s\\r\\n]*\\([\\s\\r\\n]*base64_url_decode[\\s\\r\\n]*\\([\\s\\r\\n]*@*\\$_(GET|POST|SERVER|COOKIE|REQUEST).*?(?=\\))\\)/i', 'globals_concat' => '/\\$GLOBALS\\[[\\s\\r\\n]*\\$GLOBALS[\\\'[a-z0-9]{4,}\\\'\\]/i', 'globals_assign' => '/\\$GLOBALS\\[\\\'[a-z0-9]{5,}\\\'\\][\\s\\r\\n]*=[\\s\\r\\n]*\\$[a-z]+\\d+\\[\\d+\\]\\.\\$[a-z]+\\d+\\[\\d+\\]\\.\\$[a-z]+\\d+\\[\\d+\\]\\.\\$[a-z]+\\d+\\[\\d+\\]\\./i', 'clever_include' => '/include[\\s\\r\\n]*\\([\\s\\r\\n]*[^\\.]+\\.(png|jpe?g|gif|bmp|ico).*?(?=\\))\\)/i', 'basedir_bypass' => '/curl_init[\\s\\r\\n]*\\([\\s\\r\\n]*[\\"\\\']file:\\/\\/.*?(?=\\))\\)/i', 'basedir_bypass2' => '/file\\:file\\:\\/\\//i', 'non_printable' => '/(function|return|base64_decode).{,256}[^\\x00-\\x1F\\x7F-\\xFF]{3}/i', 'double_var' => '/\\${[\\s\\r\\n]*\\${.*?}(.*)?}/i', 'double_var2' => '/\\${\\$[0-9a-zA-z]+}/i', 'global_save' => '/\\[\\s\\r\\n]*=[\\s\\r\\n]*\\$GLOBALS[\\s\\r\\n]*\\;[\\s\\r\\n]*\\$[\\s\\r\\n]*\\{/i', 'hex_var' => '/\\$\\{[\\s\\r\\n]*(\\\'|\\")\\\\x.*?(?=\\})\\}/i', 'register_function' => '/register_[a-z]+_function[\\s\\r\\n]*\\([\\s\\r\\n]*[\\\'\\"][\\s\\r\\n]*(eval|assert|passthru|exec|include|system|shell_exec|`).*?(?=\\))\\)/i', 'safemode_bypass' => '/\\x00\\/\\.\\.\\/|LD_PRELOAD/i', 'ioncube_loader' => '/IonCube\\_loader/i', 'nano' => '/\\$[a-z0-9-_]+\\[[^]]+\\]\\((?<=\\().*?(?=\\))\\)/', 'ninja' => '/base64_decode[^;]+getallheaders/', 'execution' => '/\\b(eval|assert|passthru|exec|include|system|pcntl_exec|shell_exec|base64_decode|`|array_map|ob_start|call_user_func(_array)?)\\s*\\(\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER)).*?(?=\\))\\)/', 'execution2' => '/\\b(array_filter|array_reduce|array_walk(_recursive)?|array_walk|assert_options|uasort|uksort|usort|preg_replace_callback|iterator_apply)\\s*\\(\\s*[^,]+,\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER)).*?(?=\\))\\)/', 'execution3' => '/\\b(array_(diff|intersect)_u(key|assoc)|array_udiff)\\s*\\(\\s*([^,]+\\s*,?)+\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))\\s*\\[[^]]+\\]\\s*\\)+\\s*;/', 'shellshock' => '/\\(\\)\\s*{\\s*[a-z:]\\s*;\\s*}\\s*;/', 'silenced_eval' => '/@eval\\s*\\((?<=\\().*?(?=\\))\\)/', 'various' => '/\\<\\!\\-\\-\\#exec\\s*cmd\\=/i', 'htaccess_handler' => '/SetHandler[\\s\\r\\n]*application\\/x\\-httpd\\-php/i', 'htaccess_type' => '/AddType\\s+application\\/x-httpd-(php|cgi)/i', 'file_prepend' => '/php_value\\s*auto_prepend_file/i', 'iis_com' => '/IIS\\:\\/\\/localhost\\/w3svc/i', 'reversed' => '/(noitcnuf\\_etaerc|metsys|urhtssap|edulcni|etucexe\\_llehs|ecalper\\_rts|ecalper_rts)/i', 'rawurlendcode_rot13' => '/rawurldecode[\\s\\r\\n]*\\(str_rot13[\\s\\r\\n]*\\((?<=\\().*?(?=\\))\\)/i', 'serialize_phpversion' => '/\\@serialize[\\s\\r\\n]*\\([\\s\\r\\n]*(Array\\(|\\[)(\\\'|\\")php(\\\'|\\")[\\s\\r\\n]*\\=\\>[\\s\\r\\n]*\\@phpversion[\\s\\r\\n]*\\((?<=\\().*?(?=\\))\\)/si', 'md5_create_function' => '/\\$md5\\s*=\\s*.*create_function\\s*\\(.*?\\);\\s*\\$.*?\\)\\s*;/si', 'god_mode' => '/\\/\\*god_mode_on\\*\\/eval\\(base64_decode\\([\\"\\\'][^\\"\\\']{255,}[\\"\\\']\\)\\);\\s*\\/\\*god_mode_off\\*\\//si', 'wordpress_filter' => '/\\$md5\\s*=\\s*[\\"|\\\']\\w+[\\"|\\\'];\\s*\\$wp_salt\\s*=\\s*[\\w\\(\\),\\"\\\'\\;$]+\\s*\\$wp_add_filter\\s*=\\s*create_function\\(.*?\\);\\s*\\$wp_add_filter\\(.*?\\);/si', 'password_protection_md5' => '/md5\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*[\\\'\\"][0-9a-f]{32}[\\\'\\"]/si', 'password_protection_sha' => '/sha1\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*[\\\'\\"][0-9a-f]{40}[\\\'\\"]/si'); public static $FUNCTIONS = array('il_exec', 'shell_exec', 'eval', 'create_function', 'posix_kill', 'proc_close', 'proc_get_status', 'proc_nice', 'proc_open', 'inject_code', 'apache_child_terminate', 'apache_note', 'define_syslog_variables'); }; class Flag { public $name, $callback, $aliases = array(), $hasValue = false, $defaultValue, $var, $help; public function __construct($name, $options = array(), $callback = null) { $this->name = $name; $this->callback = $callback; $this->aliases = array_merge(array("--{$name}"), (array) @$options['alias']); $this->defaultValue = @$options['default']; $this->hasValue = (bool) @$options['has_value']; $this->help = @$options['help']; if (array_key_exists('var', $options)) { $this->var =& $options['var']; } } public function __toString() { $s = join('|', $this->aliases); if ($this->hasValue) { $s = "{$s} <{$this->name}>"; } return "[{$s}]"; } }; class Application { public static $NAME = 'amwscan'; public static $VERSION = "0.4.0.44"; public static $ROOT = './'; public static $PATH_QUARANTINE = '/quarantine/'; public static $PATH_LOGS = '/scanner.log'; public static $PATH_WHITELIST = '/scanner_whitelist.csv'; public static $PATH_LOGS_INFECTED = '/scanner_infected.log'; public static $SCAN_PATH = './'; public static $SCAN_EXTENSIONS = array('php', 'php3', 'ph3', 'php4', 'ph4', 'php5', 'ph5', 'php7', 'ph7', 'phtm', 'phtml', 'ico'); public static $ARGV = array(); public static $WHITELIST = array(); public static $FUNCTIONS = array(); public static $EXPLOITS = array(); public static $summary_scanned = 0; public static $summary_detected = 0; public static $summary_removed = array(); public static $summary_ignored = array(); public static $summary_edited = array(); public static $summary_quarantine = array(); public static $summary_whitelist = array(); public function __construct() { } private function init() { if (self::$ROOT == './') { self::$ROOT = dirname(__FILE__); } if (self::$SCAN_PATH == './') { self::$SCAN_PATH = dirname(__FILE__); } self::$PATH_QUARANTINE = self::$ROOT . self::$PATH_QUARANTINE; self::$PATH_LOGS = self::$ROOT . self::$PATH_LOGS; self::$PATH_WHITELIST = self::$ROOT . self::$PATH_WHITELIST; self::$PATH_LOGS_INFECTED = self::$ROOT . self::$PATH_LOGS_INFECTED; self::$WHITELIST = CSV::read(self::$PATH_WHITELIST); @unlink(self::$PATH_LOGS); } public function run() { try { Console::header(); $this->init(); $this->modes(); $this->arguments(); Console::display('Start scanning...' . Console::eol(1)); Console::write('Scan date: ' . date('d-m-Y H:i:s') . Console::eol(1)); Console::write('Scanning ' . self::$SCAN_PATH . Console::eol(2)); Console::write(Console::eol(1) . 'Mapping files...' . Console::eol(1)); $iterator = $this->mapping(); $files_count = iterator_count($iterator); Console::write('Found ' . $files_count . ' files' . Console::eol(2)); Console::write('Checking files...' . Console::eol(2)); Console::progress(0, $files_count); $this->scan($iterator); Console::write(Console::eol(2)); Console::write('Scan finished!', 'green'); Console::write(Console::eol(3)); $this->summary(); } catch (\Exception $e) { Console::write(Console::eol(1)); Console::write($e->getMessage(), 'red'); Console::write(Console::eol(1)); } } private function arguments() { self::$ARGV = new Argv(); self::$ARGV->addFlag('agile', array('alias' => '-a', 'default' => false)); self::$ARGV->addFlag('help', array('alias' => '-h', 'default' => false)); self::$ARGV->addFlag('log', array('alias' => '-l', 'default' => false)); self::$ARGV->addFlag('scan', array('alias' => '-s', 'default' => false)); self::$ARGV->addFlag('exploits', array('default' => false, 'has_value' => true)); self::$ARGV->addFlag('functions', array('default' => false, 'has_value' => true)); self::$ARGV->addFlag('only-exploits', array('alias' => '-e', 'default' => false)); self::$ARGV->addFlag('only-functions', array('alias' => '-f', 'default' => false)); self::$ARGV->addFlag('whitelist-only-path', array('default' => false)); self::$ARGV->addArgument('path', array('var_args' => true, 'default' => '')); self::$ARGV->parse(); if (isset(self::$ARGV['help']) && self::$ARGV['help']) { Console::helper(); } if (isset(self::$ARGV['scan']) && self::$ARGV['scan']) { $_REQUEST['scan'] = true; } else { $_REQUEST['scan'] = false; } if (isset(self::$ARGV['log']) && self::$ARGV['log']) { $_REQUEST['log'] = true; } else { $_REQUEST['log'] = false; } if (isset(self::$ARGV['whitelist-only-path']) && self::$ARGV['whitelist-only-path']) { $_REQUEST['whitelist-only-path'] = true; } else { $_REQUEST['whitelist-only-path'] = false; } if (isset(self::$ARGV['exploits']) && self::$ARGV['exploits']) { if (is_string(self::$ARGV['exploits'])) { $filtered = str_replace(array('
', '
', '	', ' '), '', self::$ARGV['exploits']); $filtered = @explode(',', $filtered); if (!empty($filtered) && count($filtered) > 0) { foreach (Definitions::$EXPLOITS as $key => $value) { if (in_array($key, $filtered)) { self::$EXPLOITS[$key] = $value; } } if (!empty(self::$EXPLOITS) && count(self::$EXPLOITS) > 0) { Console::write('Exploit to search: ' . implode(', ', array_keys(self::$EXPLOITS)) . Console::eol(1)); } else { self::$EXPLOITS = array(); } } } } if (isset(self::$ARGV['only-exploits']) && self::$ARGV['only-exploits']) { $_REQUEST['exploits'] = true; } else { $_REQUEST['exploits'] = false; } if (isset(self::$ARGV['functions']) && self::$ARGV['functions']) { if (is_string(self::$ARGV['functions'])) { self::$FUNCTIONS = str_replace(array('
', '
', '	', ' '), '', self::$ARGV['functions']); self::$FUNCTIONS = @explode(',', self::$FUNCTIONS); if (!empty(self::$FUNCTIONS) && count(self::$FUNCTIONS) > 0) { Console::write('Functions to search: ' . implode(', ', self::$FUNCTIONS) . Console::eol(1)); } else { $FUNCTIONS = array(); } } } if (isset(self::$ARGV['only-functions']) && self::$ARGV['only-functions']) { $_REQUEST['functions'] = true; } else { $_REQUEST['functions'] = false; } if (isset(self::$ARGV['agile']) && self::$ARGV['agile']) { self::$EXPLOITS = Definitions::$EXPLOITS; $_REQUEST['exploits'] = true; self::$EXPLOITS['execution'] = '/\\b(eval|assert|passthru|exec|include|system|pcntl_exec|shell_exec|`|array_map|ob_start|call_user_func(_array)?)\\s*\\(\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER)).*?(?=\\))\\)/'; self::$EXPLOITS['concat_vars_with_spaces'] = '/(\\$([a-zA-Z0-9]+)[\\s\\r\\n]*\\.[\\s\\r\\n]*){8}/'; self::$EXPLOITS['concat_vars_array'] = '/(\\$([a-zA-Z0-9]+)(\\{|\\[)([0-9]+)(\\}|\\])[\\s\\r\\n]*\\.[\\s\\r\\n]*){8}.*?(?=\\})\\}/i'; unset(self::$EXPLOITS['nano'], self::$EXPLOITS['double_var2']); } if (isset(self::$ARGV['log']) && self::$ARGV['log'] && isset(self::$ARGV['scan']) && self::$ARGV['scan']) { unset($_REQUEST['log']); } $arg = self::$ARGV->arg(0); if (!empty($arg)) { $path = trim($arg); if (file_exists(realpath($path))) { self::$SCAN_PATH = realpath($path); } } if (!is_dir(self::$SCAN_PATH)) { self::$SCAN_PATH = pathinfo(self::$SCAN_PATH, PATHINFO_DIRNAME); } } private function modes() { if ($_REQUEST['functions'] && $_REQUEST['exploits']) { Console::write('Can\'t be set both flags --only-functions and --only-functions together!'); die(Console::eol(2)); } if ($_REQUEST['functions'] || !$_REQUEST['exploits'] && empty(self::$FUNCTIONS)) { self::$FUNCTIONS = Definitions::$FUNCTIONS; } else { if ($_REQUEST['exploits']) { self::$FUNCTIONS = array(); if (!self::$ARGV['agile']) { Console::write('Exploits mode enabled' . Console::eol(1)); } } else { Console::write('No functions to search' . Console::eol(1)); } } if (!$_REQUEST['functions'] && empty(self::$EXPLOITS)) { self::$EXPLOITS = Definitions::$EXPLOITS; } if (self::$ARGV['agile']) { Console::write('Agile mode enabled' . Console::eol(1)); } if ($_REQUEST['scan']) { Console::write('Scan mode enabled' . Console::eol(1)); } if ($_REQUEST['functions']) { self::$EXPLOITS = array(); } if ($_REQUEST['exploits']) { self::$FUNCTIONS = array(); } } public function mapping() { $directory = new \RecursiveDirectoryIterator(self::$SCAN_PATH); $files = new \RecursiveIteratorIterator($directory); $iterator = new \CallbackFilterIterator($files, function ($cur, $key, $iter) { return $cur->isFile() && in_array($cur->getExtension(), Application::$SCAN_EXTENSIONS); }); return $iterator; } public static function isInfectedFavicon($file) { $_FILE_NAME = $file->getFilename(); $_FILE_EXTENSION = $file->getExtension(); return strpos($_FILE_NAME, 'favicon_') === 0 && $_FILE_EXTENSION === 'ico' && strlen($_FILE_NAME) > 12 || preg_match('/^\\.[\\w]+\\.ico/i', trim($_FILE_NAME)); } public function scanFile($info) { $_FILE_PATH = $info->getPathname(); $is_favicon = self::isInfectedFavicon($info); $pattern_found = array(); $fc = file_get_contents($_FILE_PATH); $fc_clean = php_strip_whitespace($_FILE_PATH); $fc_filtered = $this->filterCode($fc_clean); foreach (self::$EXPLOITS as $key => $pattern) { $last_match = null; $match_description = null; if (@preg_match($pattern, $fc, $match, PREG_OFFSET_CAPTURE) || @preg_match($pattern, $fc_clean, $match, PREG_OFFSET_CAPTURE) || @preg_match($pattern, $fc_filtered, $match, PREG_OFFSET_CAPTURE)) { $last_match = $match[0][0]; $match_description = $key . '
 => ' . $last_match; } if (!empty($last_match) && @preg_match('/' . preg_quote($last_match, '/') . '/i', $fc, $match, PREG_OFFSET_CAPTURE)) { $lineNumber = count(explode('
', substr($fc, 0, $match[0][1]))); $match_description = $key . ' [line ' . $lineNumber . ']
 => ' . $last_match; } if (!empty($match_description)) { $pattern_found[$match_description] = $pattern; } } unset($last_match, $match_description, $lineNumber, $match); foreach (self::$FUNCTIONS as $_func) { $last_match = null; $match_description = null; $func = preg_quote(trim($_func), '/'); $regex_pattern = '/(?:^|[^a-zA-Z0-9_]+)(' . $func . '[\\s
]*\\((?<=\\().*?(?=\\))\\))/si'; $regex_pattern_base64 = '/' . base64_encode($_func) . '/s'; if (@preg_match($regex_pattern, $fc_filtered, $match, PREG_OFFSET_CAPTURE) || @preg_match($regex_pattern, $fc_clean, $match, PREG_OFFSET_CAPTURE) || @preg_match($regex_pattern_base64, $fc_filtered, $match, PREG_OFFSET_CAPTURE) || @preg_match($regex_pattern_base64, $fc_clean, $match, PREG_OFFSET_CAPTURE)) { $last_match = explode($_func, $match[0][0]); $last_match = $_func . $last_match[1]; $match_description = $func . '
 => ' . $last_match; } if (!empty($last_match) && @preg_match('/' . preg_quote($last_match, '/') . '/', $fc, $match, PREG_OFFSET_CAPTURE)) { $lineNumber = count(explode('
', substr($fc, 0, $match[0][1]))); $match_description = $func . ' [line ' . $lineNumber . ']
 => ' . $last_match; } if (!empty($match_description)) { $pattern_found[$match_description] = $regex_pattern; } unset($last_match, $match_description, $lineNumber, $regex_pattern, $regex_pattern_base64, $match); } unset($fc_filtered, $fc_clean); if ($is_favicon) { $pattern_found['infected_icon'] = ''; } return $pattern_found; } private function filterCode($fc) { $fc_filtered = preg_replace('/<\\?php(.*?)(?!\\B"[^"]*)\\?>(?![^"]*"\\B)/si', '$1', $fc); $fc_filtered = preg_replace('/(\\\'|\\")[\\s
]*\\.[\\s
]*(\'|")/si', '', $fc_filtered); $fc_filtered = preg_replace('/([\\s]+)/i', ' ', $fc_filtered); $fc_filtered = preg_replace_callback('/\\\\x[A-Fa-f0-9]{2}/si', function ($match) { return @hex2bin(str_replace('\\x', '', $match)); }, $fc_filtered); $fc_filtered = preg_replace_callback('/\\\\[0-9]{3}/si', function ($match) { return chr(intval($match)); }, $fc_filtered); $decoders = array('str_rot13', 'gzinflate', 'base64_decode', 'rawurldecode', 'gzuncompress', 'strrev', 'convert_uudecode', 'urldecode'); $pattern_decoder = array(); foreach ($decoders as $decoder) { $pattern_decoder[] = preg_quote($decoder, '/'); } $last_match = null; $recursive_loop = true; do { $regex_pattern = '/((' . implode($pattern_decoder, '|') . ')[\\s\\r\\n]*\\((([^()]|(?R))*)?\\))/si'; preg_match($regex_pattern, $fc_filtered, $match); if ($recursive_loop && preg_match('/(\\((?:\\"|\\\')(([^\\\'\\"]|(?R))*?)(?:\\"|\\\')\\))/si', $match[0], $encoded_match)) { $value = $encoded_match[3]; $last_match = $match; $decoders_found = array_reverse(explode('(', $match[0])); foreach ($decoders_found as $decoder) { if (in_array($decoder, $decoders)) { if (is_string($value) && !empty($value)) { $value = $decoder($value); } } } if (is_string($value) && !empty($value)) { $value = str_replace('"', '\'', $value); $value = '"' . $value . '"'; $fc_filtered = str_replace($match[0], $value, $fc_filtered); } else { $recursive_loop = false; } } else { $recursive_loop = false; } } while (!empty($match[0]) && $recursive_loop); unset($last_match, $recursive_loop, $value, $match, $decoders_found, $decoders, $pattern_decoder, $encoded_match); return $fc_filtered; } private function scan($iterator) { $files_count = iterator_count($iterator); foreach ($iterator as $info) { Console::progress(self::$summary_scanned, $files_count); $_FILE_PATH = $info->getPathname(); $_FILE_EXTENSION = $info->getExtension(); $is_favicon = self::isInfectedFavicon($info); if (in_array($_FILE_EXTENSION, self::$SCAN_EXTENSIONS) && (!file_exists(self::$PATH_QUARANTINE) || strpos(realpath($_FILE_PATH), realpath(self::$PATH_QUARANTINE)) === false) || $is_favicon) { $pattern_found = $this->scanFile($info); $pattern_found = array_unique($pattern_found); $in_whitelist = 0; foreach (self::$WHITELIST as $item) { foreach ($pattern_found as $key => $pattern) { $exploit = preg_replace('/^(\\S+) \\[line [0-9]+\\].*/si', '$1', trim($key)); $exploit_whitelist = preg_replace('/^(\\S+).*/si', '$1', trim($item[1])); $lineNumber = preg_replace('/^\\S+ \\[line ([0-9]+)\\].*/si', '$1', trim($key)); if (realpath($_FILE_PATH) == realpath($item[0]) && $exploit == $exploit_whitelist && ($_REQUEST['whitelist-only-path'] || !$_REQUEST['whitelist-only-path'] && $lineNumber == $item[2])) { $in_whitelist++; } } } self::$summary_scanned++; usleep(10); if (realpath($_FILE_PATH) != realpath(__FILE__) && ($is_favicon || !empty($pattern_found)) && ($in_whitelist === 0 || $in_whitelist != count($pattern_found))) { self::$summary_detected++; if ($_REQUEST['scan']) { self::$summary_ignored[] = $_FILE_PATH; continue; } else { $_WHILE = true; $last_command = '0'; Console::display(Console::eol(2)); Console::write(Console::eol(1)); Console::write('PROBABLE MALWARE FOUND!', 'red'); while ($_WHILE) { $fc = file_get_contents($_FILE_PATH); $preview_lines = explode(Console::eol(1), trim($fc)); $preview = implode(Console::eol(1), array_slice($preview_lines, 0, 1000)); if (!in_array($last_command, array('4', '5', '7'))) { Console::write(Console::eol(1) . "{$_FILE_PATH}", 'yellow'); Console::write(Console::eol(2)); Console::write(Console::title(' PREVIEW ', '='), 'white', 'red'); Console::write(Console::eol(2)); Console::code($preview, $pattern_found); if (count($preview_lines) > 1000) { Console::write(Console::eol(2)); Console::write('  [ ' . (count($preview_lines) - 1000) . ' More lines ]'); } Console::write(Console::eol(2)); Console::write(Console::title('', '='), 'white', 'red'); } Console::write(Console::eol(2)); Console::write('File path: ' . $_FILE_PATH, 'yellow'); Console::write('
'); Console::write('Exploit: ' . Console::eol(1) . implode(Console::eol(1), array_keys($pattern_found)), 'red'); Console::display(Console::eol(2)); Console::display('OPTIONS:' . Console::eol(2)); Console::display('    [1] Delete file' . Console::eol(1)); Console::display('    [2] Move to quarantine' . Console::eol(1)); Console::display('    [3] Try remove evil code' . Console::eol(1)); Console::display('    [4] Open with vim' . Console::eol(1)); Console::display('    [5] Open with nano' . Console::eol(1)); Console::display('    [6] Add to whitelist' . Console::eol(1)); Console::display('    [7] Show source' . Console::eol(1)); Console::display('    [-] Ignore' . Console::eol(2)); $confirmation = Console::read('What is your choice? ', 'purple'); Console::display(Console::eol(1)); $last_command = $confirmation; unset($preview_lines, $preview); if (in_array($confirmation, array('1'))) { Console::write('File path: ' . $_FILE_PATH . Console::eol(1), 'yellow'); $confirm2 = Console::read('Want delete this file [y|N]? ', 'purple'); Console::display(Console::eol(1)); if ($confirm2 == 'y') { unlink($_FILE_PATH); self::$summary_removed[] = $_FILE_PATH; Console::write("File '{$_FILE_PATH}' removed!" . Console::eol(2), 'green'); $_WHILE = false; } } else { if (in_array($confirmation, array('2'))) { $quarantine = self::$PATH_QUARANTINE . str_replace(realpath(__DIR__), '', $_FILE_PATH); if (!is_dir(dirname($quarantine))) { mkdir(dirname($quarantine), 493, true); } rename($_FILE_PATH, $quarantine); self::$summary_quarantine[] = $quarantine; Console::write("File '{$_FILE_PATH}' moved to quarantine!" . Console::eol(2), 'green'); $_WHILE = false; } else { if (in_array($confirmation, array('3')) && count($pattern_found) > 0) { foreach ($pattern_found as $pattern) { preg_match($pattern, $fc, $string_match); preg_match('/(<\\?php)(.*?)(' . preg_quote($string_match[0], '/') . '\\s*\\;?)(.*?)((?!\\B"[^"]*)\\?>(?![^"]*"\\B)|.*?$)/si', $fc, $match); $match[2] = trim($match[2]); $match[4] = trim($match[4]); if (!empty($match[2]) || !empty($match[4])) { $fc = str_replace($match[0], $match[1] . $match[2] . $match[4] . $match[5], $fc); } else { $fc = str_replace($match[0], '', $fc); } $fc = preg_replace('/<\\?php[\\s\\r\\n]*\\?\\>/si', '', $fc); } Console::write(Console::eol(1)); Console::write(Console::title(' SANITIZED ', '='), 'black', 'green'); Console::write(Console::eol(2)); Console::code($fc); Console::write(Console::eol(2)); Console::write(Console::title('', '='), 'black', 'green'); Console::display(Console::eol(2)); Console::display('File sanitized, now you must verify if has been fixed correctly.' . Console::eol(2), 'yellow'); $confirm2 = Console::read('Confirm and save [y|N]? ', 'purple'); Console::display(Console::eol(1)); if ($confirm2 == 'y') { Console::write("File '{$_FILE_PATH}' sanitized!" . Console::eol(2), 'green'); file_put_contents($_FILE_PATH, $fc); self::$summary_removed[] = $_FILE_PATH; $_WHILE = false; } else { self::$summary_ignored[] = $_FILE_PATH; } } else { if (in_array($confirmation, array('4'))) { $descriptors = array(array('file', '/dev/tty', 'r'), array('file', '/dev/tty', 'w'), array('file', '/dev/tty', 'w')); $process = proc_open("vim '{$_FILE_PATH}'", $descriptors, $pipes); while (true) { $proc_status = proc_get_status($process); if ($proc_status['running'] == false) { break; } } self::$summary_edited[] = $_FILE_PATH; Console::write("File '{$_FILE_PATH}' edited with vim!" . Console::eol(2), 'green'); self::$summary_removed[] = $_FILE_PATH; } else { if (in_array($confirmation, array('5'))) { $descriptors = array(array('file', '/dev/tty', 'r'), array('file', '/dev/tty', 'w'), array('file', '/dev/tty', 'w')); $process = proc_open("nano -c '{$_FILE_PATH}'", $descriptors, $pipes); while (true) { $proc_status = proc_get_status($process); if ($proc_status['running'] == false) { break; } } $summary_edited[] = $_FILE_PATH; Console::write("File '{$_FILE_PATH}' edited with nano!" . Console::eol(2), 'green'); self::$summary_removed[] = $_FILE_PATH; } else { if (in_array($confirmation, array('6'))) { foreach ($pattern_found as $key => $pattern) { $exploit = preg_replace('/^(\\S+) \\[line [0-9]+\\].*/si', '$1', $key); $lineNumber = preg_replace('/^\\S+ \\[line ([0-9]+)\\].*/si', '$1', $key); self::$WHITELIST[] = array(realpath($_FILE_PATH), $exploit, $lineNumber); } self::$WHITELIST = array_map('unserialize', array_unique(array_map('serialize', self::$WHITELIST))); if (CSV::write(self::$PATH_WHITELIST, self::$WHITELIST)) { self::$summary_whitelist[] = $_FILE_PATH; Console::write("Exploits of file '{$_FILE_PATH}' added to whitelist!" . Console::eol(2), 'green'); $_WHILE = false; } else { Console::write("Exploits of file '{$_FILE_PATH}' failed adding file to whitelist! Check write permission of '" . self::$PATH_WHITELIST . '\' file!' . Console::eol(2), 'red'); } } else { if (in_array($confirmation, array('7'))) { Console::write(Console::eol(1) . "{$_FILE_PATH}", 'yellow'); Console::write(Console::eol(2)); Console::write(Console::title(' SOURCE ', '='), 'white', 'red'); Console::write(Console::eol(2)); Console::code($fc, $pattern_found); Console::write(Console::eol(2)); Console::write(Console::title('', '='), 'white', 'red'); } else { Console::write("File '{$_FILE_PATH}' skipped!" . Console::eol(2), 'green'); self::$summary_ignored[] = $_FILE_PATH; $_WHILE = false; } } } } } } } Console::write(Console::eol(1)); } unset($fc); } } } } } private function summary() { Console::write(Console::title('SUMMARY'), 'black', 'cyan'); Console::write(Console::eol(2)); Console::write('Files scanned: ' . self::$summary_scanned . Console::eol(1)); if (!$_REQUEST['scan']) { self::$summary_ignored = array_unique(self::$summary_ignored); self::$summary_edited = array_unique(self::$summary_edited); Console::write('Files edited: ' . count(self::$summary_edited) . Console::eol(1)); Console::write('Files quarantined: ' . count(self::$summary_quarantine) . Console::eol(1)); Console::write('Files whitelisted: ' . count(self::$summary_whitelist) . Console::eol(1)); Console::write('Files ignored: ' . count(self::$summary_ignored) . Console::eol(2)); } Console::write('Malware detected: ' . self::$summary_detected . Console::eol(1)); if (!$_REQUEST['scan']) { Console::write('Malware removed: ' . count(self::$summary_removed) . Console::eol(1)); } if ($_REQUEST['scan']) { Console::write(Console::eol(1) . 'Files infected: \'' . __PATH_LOGS_INFECTED__ . '\'' . Console::eol(1), 'red'); file_put_contents(__PATH_LOGS_INFECTED__, 'Log date: ' . date('d-m-Y H:i:s') . Console::eol(1) . implode(Console::eol(1), self::$summary_ignored)); Console::write(Console::eol(2)); } else { if (count(self::$summary_removed) > 0) { Console::write(Console::eol(1) . 'Files removed:' . Console::eol(1), 'red'); foreach (self::$summary_removed as $un) { Console::write($un . Console::eol(1)); } } if (count(self::$summary_edited) > 0) { Console::write(Console::eol(1) . 'Files edited:' . Console::eol(1), 'green'); foreach (self::$summary_edited as $un) { Console::write($un . Console::eol(1)); } } if (count(self::$summary_quarantine) > 0) { Console::write(Console::eol(1) . 'Files quarantined:' . Console::eol(1), 'yellow'); foreach (self::$summary_ignored as $un) { Console::write($un . Console::eol(1)); } } if (count(self::$summary_whitelist) > 0) { Console::write(Console::eol(1) . 'Files whitelisted:' . Console::eol(1), 'cyan'); foreach (self::$summary_whitelist as $un) { Console::write($un . Console::eol(1)); } } if (count(self::$summary_ignored) > 0) { Console::write(Console::eol(1) . 'Files ignored:' . Console::eol(1), 'cyan'); foreach (self::$summary_ignored as $un) { Console::write($un . Console::eol(1)); } } Console::write(Console::eol(2)); } } }; $isCLI = php_sapi_name() == 'cli'; if (!$isCLI) { die('This file must run from a console session.'); } ob_implicit_flush(false); set_time_limit(-1); ini_set('memory_limit', -1); error_reporting(0); ini_set('display_errors', 0); $app = new Application(); $app->run();